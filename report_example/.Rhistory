df_D[idx3,] %>%
dplyr::mutate(milk2 = as.numeric(milk_sold_inc)/as.numeric(p_milk)*100) %>%
dplyr::select(year, milk, milk2, milk_sold_inc, p_milk)
df_D %>% dplyr::group_by(year) %>%
dplyr::summarize(mean(as.numeric(milk_price), na.rm=T))
df_D %>% filter(year==2007) %>% with(summary(as.numeric(milk_price)))
df_D %>% filter(year==2007) %>% with(summary(as.numeric(p_milk)))
df_D %>% filter(year==2005) %>% with(summary(as.numeric(milk_price)))
df_D %>% filter(year==2005) %>% with(summary(as.numeric(p_milk)))
df_D %>% filter(year==2007) filter(milk_price<100) %>% with(summary(as.numeric(milk_price)))
df_D %>% filter(year==2007) %>% filter(milk_price<100) %>% with(summary(as.numeric(milk_price)))
df_D %>% filter(year==2007) %>% filter(as.numeric(milk_price)<100) %>% with(summary(as.numeric(milk_price)))
df_D %>% filter(year==2007) %>% with(summary(as.numeric(p_milk)))
df_D %>% filter(year==2007) %>% filter(as.numeric(milk_price)>100) %>% dplyr::select(milk_price)
df_16 <- read_csv("data/csv/AgFA2016.csv")
df_15$FarmID[1:5]
df_16$FarmID[1:5]
df_16$FarmID <- substr(df_16$FarmID, 3, 100)
df_16$FarmID[1:5]
# base_location <- "/Users/kota/Google Drive UMN/WI dairy"
base_location <- "/Volumes/GoogleDrive/My Drive/WI dairy"
setwd(base_location)
# load packages
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
# load functions
source(paste0(base_location, "/R-files/DEA_base.R"))
source(paste0(base_location, "/R-files/f_DEA_TFP_decomp.R"))
source(paste0(base_location, "/R-files/f_DEA_TFP_helpers.R"))
# load data files
price_indices <- read_csv("data/price_indices.csv")
# adjust base year
adj_base_yr <- function(df, year_var, base_yr) {
df1 <- df %>% dplyr::select(-matches(year_var))
df1$tmp_yr <- df[[year_var]]
vec_base <- df1 %>% filter(tmp_yr == base_yr)
for (j in 1:ncol(df1)) {
df1[,j] <- df1[,j] / as.numeric(vec_base[1,j])
}
df1$tmp_yr <- NULL
cbind(df %>% dplyr::select(matches(year_var)), df1)
}
price_indices <- adj_base_yr(price_indices, "Year", base_yr=2015)
# load data files
df_05 <- read_csv("data/csv/AgFA2005.csv")
df_06 <- read_csv("data/csv/AgFA2006.csv")
df_07 <- read_csv("data/csv/AgFA2007.csv")
df_08 <- read_csv("data/csv/AgFA2008.csv")
df_09 <- read_csv("data/csv/AgFA2009.csv")
df_10 <- read_csv("data/csv/AgFA2010.csv")
df_11 <- read_csv("data/csv/AgFA2011.csv")
df_12 <- read_csv("data/csv/AgFA2012.csv")
df_13 <- read_csv("data/csv/AgFA2013.csv")
df_14 <- read_csv("data/csv/AgFA2014.csv")
df_15 <- read_csv("data/csv/AgFA2015.csv")
df_16 <- read_csv("data/csv/AgFA2016.csv")
df_12$FarmID <- substr(df_12$FarmID, 3, 100)
df_13$FarmID <- substr(df_13$FarmID, 3, 100)
df_14$FarmID <- substr(df_14$FarmID, 3, 100)
df_15$FarmID <- substr(df_15$FarmID, 3, 100)
df_16$FarmID <- substr(df_16$FarmID, 3, 100)
# append yearly data files
df_A <- rbind(df_05, df_06, df_07, df_08, df_09, df_10,
df_11, df_12, df_13, df_14, df_15, df_16)
df_A <- df_A %>% filter(number_head > 0, !is.na(number_head))
# adjust the data definition
df_A <- df_A %>%
dplyr::mutate(
number_operators = as.numeric(number_operators),
num_operators = ifelse(is.na(number_operators), 1, number_operators),
lbs_milk_sold = as.numeric(lbs_milk_sold),
number_head = as.numeric(number_head),
farmid = reference_group(FarmID),
year = fiscal_year
)
# merge price indices
df_A <- df_A %>% left_join(price_indices, by=c("year"="Year"))
df_A$id <- NA
for(yr in 2005:2016) {
idx1 <- df_A$year == yr
df_A$id[idx1] <- 1:sum(idx1) + (yr - 2000)* 1000
}
# define productivity analysis variables
df_A <- df_A %>%
dplyr::mutate(
milk = lbs_milk_sold,
fringe_inc = (coop_dividends + mach_work + misc_income)/CPI,
other_inc = (resale_lvstk + calves_sold + cull_cows)/CPI + crops_sold/p_crop + fringe_inc,
gross_inc = milk_sold_inc + other_inc,
cow = number_head,
crop_exp = (chemicals + fert_lime + seed_plant_pur + other_crop_exp)/p_crop,
feed_purchased = feed_pur/p_feed,
feed_total = crop_exp + feed_purchased,
labor = (labor_hired_dep + labor_hired_nondep + employ_bens_dep + employ_bens_nondep +
num_operators * 40000 * (1 + 0.02)^(year-2005))/p_labor,
capital = (insurance + mort_int + other_int + repairs + taxes +
econ_mach_equip_depr + econ_building_depr + econ_lvstk_depr +
total_equity * 0.035)/p_machinery,
livestock_exp =  (vet_medicine + breeding_fees + other_lvstk_exp +  `cust heif`)/CPI,
net_livestock_exp = livestock_exp  - (resale_lvstk + calves_sold + cull_cows)/CPI,
other_exp = gas_fuel_oil/p_fuel + (auto_exp + cons_exp + mach_hire + rent_equip + rent_other +
+ supplies + utilities + milk_hauling +
milk_mrkt_hedge  + other_farm_exp)/CPI + livestock_exp,
other_net_exp = other_exp - other_inc
)
# dairy farm revenue ratio
df_A <- df_A %>%
dplyr::mutate(dairy_inc_rate = milk_sold_inc/gross_inc,
fringe_inc_rate = fringe_inc/gross_inc,
cull_sales_adj = cull_cows/CPI,
cull_sales_per_cow = cull_sales_adj/cow,
net_livestock_exp_cow =net_livestock_exp/cow,
crop_exp_cow = crop_exp/cow)
df_A %>% filter(crop_exp_cow > -1000 & crop_exp_cow < 1000) %>%
with(hist(crop_exp_cow))
# df_A %>% filter(net_livestock_exp_cow > -750 & net_livestock_exp_cow  < 750) %>%
#   with(hist(net_livestock_exp_cow))
# filter to keep only dairy farms based on minimum herd size and dairy revenue ratio
# apply any other outlier definitions
df_B <- df_A %>% filter(dairy_inc_rate > .7,
cow >=20,
fringe_inc_rate < .1,
cull_sales_per_cow < 750 #,
# net_livestock_exp_cow > -750,
# net_livestock_exp_cow < 750,
# crop_exp_cow > -1000,
# crop_exp_cow < 1000
)
# summary
df_B %>% dplyr::select(milk, cow, feed_total, labor, capital, other_exp,
crop_exp, feed_purchased, livestock_exp) %>% my_summary(digits=0)
# data check
df_B %>% filter(capital < 0) %>% nrow()
df_B %>% filter(other_exp < 0) %>% nrow()
df_B %>% filter(crop_exp_cow < 0) %>% nrow()
df_B %>% filter(feed_total < 0) %>% nrow()
df_B %>% filter(other_inc < 0) %>% nrow()
df_B %>% filter(capital < 0) %>%
dplyr::select(insurance, mort_int, other_int, repairs, taxes,
econ_mach_equip_depr, econ_building_depr, econ_lvstk_depr, total_equity) %>% summary()
# filter outliers again
df_B <- df_B %>% filter(other_inc > 0, capital > 0,  other_exp > 0, feed_total >0)
# summary
df_B %>% dplyr::select(milk, other_inc, cow, feed_total, labor, capital, other_exp,
crop_exp, feed_purchased) %>% my_summary(digits=0)
df_B %>% dplyr::select(milk, other_inc, cow, feed_total, labor, capital, other_exp,
crop_exp, feed_purchased) %>% apply(2, quantile,.05)
# num of obs
df_B %>% with(table(year))
((df_B %>% with(table(year)))/ (df_A %>% with(table(year)))) %>% round(2)
df_B %>% filter(year==2005) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
df_B %>% filter(year==2008) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
df_B %>% filter(year==2011) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
df_B %>% filter(year==2015) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
# ----- adjust for crop enterprise budget -----
df_B <- df_B %>% dplyr::mutate(acres = as.numeric(acres_owned) + as.numeric(acres_rented))
calc_crop_share <- function(df, varname, year_var="year", newvar="newvar") {
# browser()
lm1 <- lm(as.formula(paste(varname, "~ acres + cow + factor(", year_var, ")")),
data = df)
coeff_acre <- lm1$coefficients[2]
coeff_cow <- lm1$coefficients[3]
tmp_newvar <- df %>% with(coeff_acre * acres/ ( coeff_acre * acres + coeff_cow * cow))
# df$tmp_timevar <- df[[year_var]]
# tmp_newvar <- rep(NA, nrow(df))
# for (yr in unique(df$tmp_timevar))
# {
#   df_yr <- df %>% filter(tmp_timevar == yr)
#   lm1 <- lm(as.formula(paste(varname, "~ acres + cow" )),
#             data = df_yr)
#   coeff_cons <- lm1$coefficients[1]
#   coeff_acre <- lm1$coefficients[2]
#   coeff_cow <- lm1$coefficients[3]
#   tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
#     with(coeff_acre * acres/ ( coeff_acre * acres + coeff_cow * cow))
# }
# bounded by 0 and 1
tmp_newvar[tmp_newvar<0] <- 0
tmp_newvar[tmp_newvar>1] <- 1
# tmp_newvar[is.na(tmp_newvar)] <- 0
df[[newvar]] <- tmp_newvar
# df <- df %>% dplyr::select(-tmp_timevar)
return(df)
}
lm(num_operators ~ acres + cow + factor(year), data =df_B) %>% summary()
tmp <- df_B %>% calc_crop_share("gas_fuel_oil", newvar="cr_sh_gas")
cr_sh_varlist <- c(# other-expense items
"gas_fuel_oil", "auto_exp", "cons_exp",
"mach_hire", "rent_equip",  "rent_other",
"supplies", "utilities", "other_farm_exp",
# labor-expense items
"labor",
# "labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity")
cr_sh_namelist <- paste0("cr_sh_", c(# other-expense items
"gas", "auto", "cons",
"mach", "rent_e",  "rent_o",
"supplies", "utilities", "other_f",
# labor-expense items
"labor",
# "labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity"))
tmp <- df_B
for (i in 1:length(cr_sh_varlist)) {
tmp <<- tmp  %>% calc_crop_share(cr_sh_varlist[i], newvar=cr_sh_namelist[i])
}
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% summary
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% apply(2,median, na.rm=T)  %>% round(2)
df_B2 <- tmp
df_B2 %>% group_by(year) %>% dplyr::summarize(mean(cr_sh_gas, na.rm = T),
mean(cr_sh_auto, na.rm = T),
mean(cr_sh_cons, na.rm = T),
mean(cr_sh_mach, na.rm = T),
mean(cr_sh_rent_e, na.rm = T),
mean(cr_sh_rent_o, na.rm = T),
mean(cr_sh_supplies, na.rm = T),
mean(cr_sh_utilities, na.rm = T),
mean(cr_sh_other_f, na.rm = T))
df_B2 %>% group_by(year) %>% dplyr::summarize(mean(cr_sh_labor, na.rm = T),
mean(cr_sh_insurance, na.rm = T),
mean(cr_sh_mort_int, na.rm = T),
mean(cr_sh_other_int, na.rm = T),
mean(cr_sh_repairs, na.rm = T),
mean(cr_sh_taxes, na.rm = T),
mean(cr_sh_econ_mach_equip_depr, na.rm = T),
mean(cr_sh_econ_building_depr, na.rm = T),
mean(cr_sh_econ_lvstk_depr, na.rm = T),
mean(cr_sh_total_equity, na.rm = T))
# num of obs
df_B2 %>% filter(!is.na(acres)) %>% with(table(year))
df_B2 %>% filter(is.na(acres)) %>% with(table(year)) # obs with no acreage info will be excluded from the analysis
df_B2 <- df_B2 %>%
dplyr::mutate(
milk = lbs_milk_sold,
fringe_inc = (coop_dividends + mach_work + misc_income)/CPI,
# other_inc = (resale_lvstk + calves_sold + cull_cows)/CPI  + fringe_inc, # removed crop_sales
other_inc = (resale_lvstk + calves_sold + cull_cows)/CPI, # exclude fringe_inc, # removed crop_sales
gross_inc = milk_sold_inc + other_inc,
cow = number_head,
crop_exp = (chemicals + fert_lime + seed_plant_pur + other_crop_exp - crops_sold)/p_crop +
cr_sh_gas * gas_fuel_oil/p_fuel +
# crop share of other expense
( cr_sh_auto * auto_exp + cr_sh_cons * cons_exp + cr_sh_mach * mach_hire +
cr_sh_rent_e * rent_equip + cr_sh_rent_o + rent_other +
+ cr_sh_supplies * supplies + cr_sh_utilities *utilities +
cr_sh_other_f * other_farm_exp)/CPI +
# crop share of labor expense
cr_sh_labor * (labor_hired_dep + labor_hired_nondep + employ_bens_dep + employ_bens_nondep +
num_operators * 40000 * (1 + 0.02)^(year-2005))/p_labor +
(cr_sh_insurance* insurance + cr_sh_mort_int * mort_int + cr_sh_other_int* other_int +
cr_sh_repairs * repairs + cr_sh_taxes * taxes +
cr_sh_econ_mach_equip_depr * econ_mach_equip_depr + cr_sh_econ_building_depr * econ_building_depr +
cr_sh_econ_lvstk_depr * econ_lvstk_depr +
cr_sh_total_equity * total_equity * 0.035)/p_machinery,
feed_purchased = feed_pur/p_feed,
feed_total = crop_exp + feed_purchased,
labor =  (1 - cr_sh_labor) *
(labor_hired_dep + labor_hired_nondep + employ_bens_dep + employ_bens_nondep +
num_operators * 40000 * (1 + 0.02)^(year-2005))/p_labor,
capital = ((1-cr_sh_insurance)* insurance + (1-cr_sh_mort_int) * mort_int + (1-cr_sh_other_int)* other_int +
(1-cr_sh_repairs) * repairs + (1-cr_sh_taxes) * taxes +
(1-cr_sh_econ_mach_equip_depr) * econ_mach_equip_depr +
(1-cr_sh_econ_building_depr) * econ_building_depr +
(1-cr_sh_econ_lvstk_depr) * econ_lvstk_depr +
(1-cr_sh_total_equity) * total_equity * 0.035)/p_machinery,
livestock_exp =  (vet_medicine + breeding_fees + other_lvstk_exp +  `cust heif`)/CPI,
net_livestock_exp = livestock_exp  - (resale_lvstk + calves_sold + cull_cows)/CPI,
other_exp =  ( (1-cr_sh_auto) * auto_exp + (1-cr_sh_cons) * cons_exp + (1-cr_sh_mach) * mach_hire +
(1-cr_sh_rent_e) * rent_equip + (1-cr_sh_rent_o) + rent_other +
+ (1-cr_sh_supplies) * supplies + (1-cr_sh_utilities) *utilities +
(1-cr_sh_other_f) * other_farm_exp + milk_hauling +
milk_mrkt_hedge)/CPI + livestock_exp,
other_net_exp = other_exp - other_inc
)
# before crop-share adjustment
df_B %>% filter(year==2015) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
# after crop-share adjustment
df_B2 %>% filter(year==2015) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
df_B2 <- df_B2 %>% filter(other_inc > 0, capital > 0,  other_exp > 0, feed_total >0, other_net_exp >0)
# ------- new code: begin -------
df_C <- df_B2
# organic
df_C$organic_products <- df_C$organic_products %>% as.numeric()
df_C <- df_C %>% dplyr::mutate(p_milk = milk_sold_inc/milk*100)
df_C %>% with(table(year))
df_C %>% filter(p_milk>25) %>% with(table(year))
df_C <- df_C %>% group_by(year) %>%
dplyr::mutate(p_milk_avg = mean(p_milk, na.rm=T),
p_milk_sd = sd(p_milk, na.rm=T)) %>%
ungroup() %>%
dplyr::mutate(organic = ifelse(p_milk > p_milk_avg + 1.645*p_milk_sd, 1, 0),
organic = ifelse(is.na(organic_products), organic, organic_products)
)
df_C %>% filter(organic==1) %>% with(table(year))
df_C %>% filter(organic==0) %>% with(table(year))
# characteristics: 3x milking, acres etc.
df_C <- df_C %>%
dplyr::mutate( milking_freq = as.integer(milking_freq),
milking3x = ifelse(milking_freq >= 3, 1, 0),
acres_rented = as.numeric(acres_rented),
acres_owned = as.numeric(acres_owned),
owned_acres_ratio = acres_owned/(acres_owned + acres_rented)
)
df_C %>% filter(milking3x==1) %>% with(table(year))
df_C %>% dplyr::select(milking3x,
acres_owned,
acres_rented,
owned_acres_ratio) %>% summary()
# create herd size and acre classes
df_C <- df_C %>%
dplyr::mutate(herd_size_cat = ifelse(cow>499, 5,
ifelse(cow>199, 4,
ifelse(cow>99, 3,
ifelse(cow>49, 2, 1)))),
herd_size_class = paste0("s", herd_size_cat) %>% factor(),
herd_size_val = c(" 1-49", "50-99", "100-199", "200-499","500+")[herd_size_cat] %>%
factor(levels = c(" 1-49", "50-99", "100-199", "200-499","500+")),
acre_own_cat = ifelse(acres_owned>499, 4,
ifelse(acres_owned>199, 3,
ifelse(acres_owned>99, 2, 1))),
acre_own_class = ifelse(is.na(acres_owned), NA, paste0("s", acre_own_cat)) %>% factor(),
acre_own_val = c(" 1-99", "100-199", "200-499","500+")[acre_own_cat] %>%
factor(levels = c(" 1-99", "100-199", "200-499","500+"))
)
df_C %>% with(table(herd_size_class))
df_C %>% with(table(acre_own_class))
df_D %>% filter(p_milk > 100) %>%
dplyr::select(year, FarmID, milk, p_milk, milk_price)
df_D %>% filter(as.numeric(milk_price) > 100) %>%
dplyr::select(year, FarmID, milk, p_milk, milk_price)
df_D %>% filter(as.numeric(milk_price) > 100) %>%
dplyr::select(year, FarmID, milk, cow, p_milk, milk_price)
setwd('~/R_projects/excel_Shiny')
setwd('~/R_projects/excel_Shiny/')
setwd('~R_projects/excel_Shiny/')
setwd('~/Users/kota/Dropbox/R_projects/excel_Shiny/')
setwd('~/Users/kota/Dropbox/R_projects/excel_Shiny')
getwd
getwd()
setwd('~/Users/kota/Dropbox/R_projects/excel_Shiny')
library(shiny)
library(googleAuthR)
library(googleID)
?callModule
googleAuth()
googleAuth
googleAuth()
?googleAuth
?oauth_listener(
)
gar_auth()
?gar_auth
googleAuthR::gar_auth()
CLIENT_URL     <-  "https://kotamine.shinyapps.io/google_login_example/"
# CLIENT_URL     <-  'http://127.0.0.1:4488'  # URL on my desktop
# Run this as: shiny::runApp(port=4488) on desktop
options("googleAuthR.webapp.client_id" = CLIENT_ID)
options("googleAuthR.webapp.client_secret" = CLIENT_SECRET)
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/userinfo.email",
"https://www.googleapis.com/auth/userinfo.profile"))
CLIENT_ID      <- "256934643886-8pnre1d6e4o7rgm941cnb9ehq43dlk63.apps.googleusercontent.com"
CLIENT_SECRET  <- "Kk1v2MPAI-6DXF22v60B4o1t"
CLIENT_URL     <-  "https://kotamine.shinyapps.io/google_login_example/"
# CLIENT_URL     <-  'http://127.0.0.1:4488'  # URL on my desktop
# Run this as: shiny::runApp(port=4488) on desktop
options("googleAuthR.webapp.client_id" = CLIENT_ID)
options("googleAuthR.webapp.client_secret" = CLIENT_SECRET)
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/userinfo.email",
"https://www.googleapis.com/auth/userinfo.profile"))
googleAuthR::gar_auth()
options("googleAuthR.webapp.client_id" = CLIENT_ID)
googleAuthR::gar_auth()
traceback()
?make_new_taken
??make_new_token
options("googleAuthR.client_id" = CLIENT_ID)
googleAuthR::gar_auth()
options("googleAuthR.client_secret" = CLIENT_SECRET)
googleAuthR::gar_auth()
options("googleAuthR.client_id" = CLIENT_ID)
options("googleAuthR.client_secret" = CLIENT_SECRET)
googleAuthR::gar_auth()
options("googleAuthR.client_id" = CLIENT_ID)
options("googleAuthR.client_secret" = CLIENT_SECRET)
googleAuthR::gar_auth()
setwd()
setwd('/Users/kota/Dropbox/R_projects/excel_Shiny/google_login_example')
shiny::runApp(port=4488)
shiny::runApp(port=4488)
shiny::runApp(port=4488)
shiny::runApp(port=4488)
setwd('/Users/kota/Dropbox/R_projects/excel_Shiny/google_login_example')
shiny::runApp(port=4488)
shiny::runApp(port=4488)
remotes::install_github("MarkEdmondson1234/googleID")
shiny::runApp(port=4488)
shiny::runApp(port=4488)
shiny::runApp(port=4488)
shiny::runApp(port=4488)
?shinyServer
shiny::runApp(port=4488)
shiny::runApp(port=4488)
install.packages('googleAuthR')
install.packages("googleAuthR")
shiny::runApp(port=4488)
shiny::runApp(port=4488)
data.frame(with_shiny(f = get_user_info,
shiny_access_token = access_token()))
access_token()$credentials$access_token
access_token()$credentials
access_token()
with_shiny(f = get_user_info,
shiny_access_token = access_token())
data.frame(with_shiny(f = get_user_info,
shiny_access_token = access_token()))
data.frame(with_shiny(f = get_user_info,
shiny_access_token = access_token()))
with_shiny(f = get_user_info,
shiny_access_token = access_token())
with_shiny(f = get_user_info,
shiny_access_token = access_token()) %>% data.frame()
data.frame(with_shiny(f = get_user_info,
shiny_access_token = access_token()) )
as.data.frame(with_shiny(f = get_user_info,
shiny_access_token = access_token()) )
as.matrix(with_shiny(f = get_user_info,
shiny_access_token = access_token()) )
tmp <-with_shiny(f = get_user_info,
shiny_access_token = access_token())
data.frame(tmp)
shiny::runApp(port=4488)
data.frame(token)
Q
shiny::runApp(port=4488)
setwd('/Users/kota/Dropbox/R_projects/excel_Shiny')
library(bookdown)
render_book('excel_shiny.Rmd', "bookdown::gitbook", output_dir = "docs", output_options = list(split_by ="chapter"))
render_book('excel_shiny.Rmd', "bookdown::gitbook", output_dir = "docs", output_options = list(split_by ="chapter"))
render_book('excel_shiny.Rmd', "bookdown::gitbook", output_dir = "docs", output_options = list(split_by ="chapter"))
getwd('')
getwd
getwd()
setwd( "/Users/kota/Dropbox/R_projects/excel_Shiny/report_example/")
load("data/shape_states.RData")
load("data/df_shape_counties.RData")
cnty <- map_data("county") # using ggplot2
states <- map_data("state") # using ggplot2
# exclude alaska, hawaii, puerto rico,
all_stfips <- shape_states$FIPS
all_regions <- states$region %>% unique()
keep_lower_states <- all_stfips[!(all_stfips %in% c("02","15","72"))]
keep_lower_resions <- all_regions[!(all_regions %in% c(""))]
states <- subset(states, region %in% keep_lower_resions)
df_shape_counties <- subset(df_shape_counties, STATEFP %in% keep_lower_states)
# county population data
# http://www.nber.org/data/census-intercensal-county-population-age-sex-race-hispanic.html
load("data/county_pop.RData")
library(maps)
library(mapproj)
library(sp)
library(rmarkdown)
library(knitr)
library(dplyr)
library(ggplot2)
cnty <- map_data("county") # using ggplot2
states <- map_data("state") # using ggplot2
# county population data
# http://www.nber.org/data/census-intercensal-county-population-age-sex-race-hispanic.html
load("data/county_pop.RData")
# take 2015
county_pop2015 <- county_pop %>% filter(year==2015) %>%
dplyr::mutate(
FIPS = county,
white = (nhwa_male + nhwa_female)/tot_pop,
black = (nhba_male + nhba_female)/tot_pop,
hispanic = (h_male + h_female)/tot_pop,
asian = (nhaa_male + nhaa_female)/tot_pop,
native = (nhia_male + nhia_female)/tot_pop,
age_gr = recode_factor(agegrp,
'0'='Total', '1'='0-4','2'='5-9',
'3'='10-14', '4'='15-19', '5'='20-24',
'6'='25-29', '7'='30-34', '8'='35-39',
'9'='40-44', '10' ='45-49', '11'='50-54', '12'='55-59',
'13'='60-64', '14'='66-69', '15'='70-74', '16'='75-79',
'17'='80-84', '18'='85+')
) %>%
dplyr::select(stname, ctyname, FIPS, white, black, hispanic, asian, native,  age_gr)
# take "total" age group
county_pop2015 <- county_pop2015 %>%
filter(age_gr=="Total") %>%
dplyr::mutate(
FIPS = FIPS %>% as.character(),
FIPS = ifelse(nchar(FIPS)==4,
paste0("0", FIPS), FIPS)
)
save(county_pop2015, file = "data/county_pop2015.RData")
load( "data/county_pop2015.RData")
330/365
